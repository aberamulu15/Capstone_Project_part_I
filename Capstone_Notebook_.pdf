{
    "nbformat_minor": 1, 
    "cells": [
        {
            "execution_count": 1, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": "import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline"
        }, 
        {
            "execution_count": 2, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": "# The code was removed by Watson Studio for sharing."
        }, 
        {
            "execution_count": 3, 
            "cell_type": "code", 
            "metadata": {
                "scrolled": true
            }, 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stderr", 
                    "text": "/opt/conda/envs/Python36/lib/python3.6/site-packages/IPython/core/interactiveshell.py:3020: DtypeWarning: Columns (3) have mixed types. Specify dtype option on import or set low_memory=False.\n  interactivity=interactivity, compiler=compiler, result=result)\n"
                }, 
                {
                    "execution_count": 3, 
                    "metadata": {}, 
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>DATE</th>\n      <th>TIME</th>\n      <th>BOROUGH</th>\n      <th>ZIP CODE</th>\n      <th>LATITUDE</th>\n      <th>LONGITUDE</th>\n      <th>LOCATION</th>\n      <th>ON STREET NAME</th>\n      <th>CROSS STREET NAME</th>\n      <th>OFF STREET NAME</th>\n      <th>...</th>\n      <th>CONTRIBUTING FACTOR VEHICLE 2</th>\n      <th>CONTRIBUTING FACTOR VEHICLE 3</th>\n      <th>CONTRIBUTING FACTOR VEHICLE 4</th>\n      <th>CONTRIBUTING FACTOR VEHICLE 5</th>\n      <th>UNIQUE KEY</th>\n      <th>VEHICLE TYPE CODE 1</th>\n      <th>VEHICLE TYPE CODE 2</th>\n      <th>VEHICLE TYPE CODE 3</th>\n      <th>VEHICLE TYPE CODE 4</th>\n      <th>VEHICLE TYPE CODE 5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7/12/2019</td>\n      <td>0:00</td>\n      <td>BRONX</td>\n      <td>10472</td>\n      <td>40.831623</td>\n      <td>-73.86726</td>\n      <td>(40.831623, -73.86726)</td>\n      <td>WESTCHESTER AVENUE</td>\n      <td>SAINT LAWRENCE AVENUE</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4168556</td>\n      <td>Sedan</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7/12/2019</td>\n      <td>0:00</td>\n      <td>BROOKLYN</td>\n      <td>11207</td>\n      <td>40.669792</td>\n      <td>-73.89240</td>\n      <td>(40.669792, -73.8924)</td>\n      <td>SUTTER AVENUE</td>\n      <td>WYONA STREET</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>Unspecified</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4169745</td>\n      <td>Station Wagon/Sport Utility Vehicle</td>\n      <td>Bike</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7/12/2019</td>\n      <td>0:00</td>\n      <td>BROOKLYN</td>\n      <td>11234</td>\n      <td>40.618717</td>\n      <td>-73.93262</td>\n      <td>(40.618717, -73.93262)</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2098      FLATBUSH AVENUE</td>\n      <td>...</td>\n      <td>Unspecified</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4169938</td>\n      <td>Station Wagon/Sport Utility Vehicle</td>\n      <td>Station Wagon/Sport Utility Vehicle</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7/12/2019</td>\n      <td>0:00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.829155</td>\n      <td>-73.93728</td>\n      <td>(40.829155, -73.93728)</td>\n      <td>8 AVENUE</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>Unspecified</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4169906</td>\n      <td>Sedan</td>\n      <td>Station Wagon/Sport Utility Vehicle</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7/12/2019</td>\n      <td>0:00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.718987</td>\n      <td>-73.94635</td>\n      <td>(40.718987, -73.94635)</td>\n      <td>BROOKLYN QUEENS EXPRESSWAY</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>Unspecified</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4168595</td>\n      <td>Sedan</td>\n      <td>Sedan</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows \u00d7 29 columns</p>\n</div>", 
                        "text/plain": "        DATE  TIME   BOROUGH ZIP CODE   LATITUDE  LONGITUDE  \\\n0  7/12/2019  0:00     BRONX    10472  40.831623  -73.86726   \n1  7/12/2019  0:00  BROOKLYN    11207  40.669792  -73.89240   \n2  7/12/2019  0:00  BROOKLYN    11234  40.618717  -73.93262   \n3  7/12/2019  0:00       NaN      NaN  40.829155  -73.93728   \n4  7/12/2019  0:00       NaN      NaN  40.718987  -73.94635   \n\n                 LOCATION                    ON STREET NAME  \\\n0  (40.831623, -73.86726)  WESTCHESTER AVENUE                 \n1   (40.669792, -73.8924)  SUTTER AVENUE                      \n2  (40.618717, -73.93262)                               NaN   \n3  (40.829155, -73.93728)  8 AVENUE                           \n4  (40.718987, -73.94635)  BROOKLYN QUEENS EXPRESSWAY         \n\n       CROSS STREET NAME                           OFF STREET NAME  ...  \\\n0  SAINT LAWRENCE AVENUE                                       NaN  ...   \n1           WYONA STREET                                       NaN  ...   \n2                    NaN  2098      FLATBUSH AVENUE                 ...   \n3                    NaN                                       NaN  ...   \n4                    NaN                                       NaN  ...   \n\n   CONTRIBUTING FACTOR VEHICLE 2  CONTRIBUTING FACTOR VEHICLE 3  \\\n0                            NaN                            NaN   \n1                    Unspecified                            NaN   \n2                    Unspecified                            NaN   \n3                    Unspecified                            NaN   \n4                    Unspecified                            NaN   \n\n   CONTRIBUTING FACTOR VEHICLE 4  CONTRIBUTING FACTOR VEHICLE 5  UNIQUE KEY  \\\n0                            NaN                            NaN     4168556   \n1                            NaN                            NaN     4169745   \n2                            NaN                            NaN     4169938   \n3                            NaN                            NaN     4169906   \n4                            NaN                            NaN     4168595   \n\n                   VEHICLE TYPE CODE 1                  VEHICLE TYPE CODE 2  \\\n0                                Sedan                                  NaN   \n1  Station Wagon/Sport Utility Vehicle                                 Bike   \n2  Station Wagon/Sport Utility Vehicle  Station Wagon/Sport Utility Vehicle   \n3                                Sedan  Station Wagon/Sport Utility Vehicle   \n4                                Sedan                                Sedan   \n\n   VEHICLE TYPE CODE 3 VEHICLE TYPE CODE 4 VEHICLE TYPE CODE 5  \n0                  NaN                 NaN                 NaN  \n1                  NaN                 NaN                 NaN  \n2                  NaN                 NaN                 NaN  \n3                  NaN                 NaN                 NaN  \n4                  NaN                 NaN                 NaN  \n\n[5 rows x 29 columns]"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "my_file = project.get_file(\"Motor_Vehicle_Collisions.csv\")\nmy_file.seek(0)\ndf = pd.read_csv(my_file)\ndf.head()\n"
        }, 
        {
            "execution_count": 34, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "execution_count": 34, 
                    "metadata": {}, 
                    "data": {
                        "text/plain": "DATE                              object\nTIME                              object\nBOROUGH                           object\nZIP CODE                          object\nLATITUDE                         float64\nLONGITUDE                        float64\nLOCATION                          object\nON STREET NAME                    object\nCROSS STREET NAME                 object\nOFF STREET NAME                   object\nNUMBER OF PERSONS INJURED        float64\nNUMBER OF PERSONS KILLED         float64\nNUMBER OF PEDESTRIANS INJURED      int64\nNUMBER OF PEDESTRIANS KILLED       int64\nNUMBER OF CYCLIST INJURED          int64\nNUMBER OF CYCLIST KILLED           int64\nNUMBER OF MOTORIST INJURED         int64\nNUMBER OF MOTORIST KILLED          int64\nCONTRIBUTING FACTOR VEHICLE 1     object\nCONTRIBUTING FACTOR VEHICLE 2     object\nCONTRIBUTING FACTOR VEHICLE 3     object\nCONTRIBUTING FACTOR VEHICLE 4     object\nCONTRIBUTING FACTOR VEHICLE 5     object\nUNIQUE KEY                         int64\nVEHICLE TYPE CODE 1               object\nVEHICLE TYPE CODE 2               object\nVEHICLE TYPE CODE 3               object\nVEHICLE TYPE CODE 4               object\nVEHICLE TYPE CODE 5               object\ndtype: object"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "df.dtypes"
        }, 
        {
            "execution_count": 35, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "execution_count": 35, 
                    "metadata": {}, 
                    "data": {
                        "text/plain": "(1048575, 29)"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "# size of dataframe (rows, columns)\ndf.shape    "
        }, 
        {
            "execution_count": 4, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": "# Data manipulation\n## Rename columns\ndf.rename(columns = {'ZIP CODE'          : 'ZIP_CODE',\n                       'ON STREET NAME'    : 'STREET_ON',\n                       'CROSS STREET NAME' : 'STREET_CROSS',\n                       'OFF STREET NAME'   : 'STREET_OFF',\n                       'NUMBER OF PERSONS INJURED'     : 'NUM_PER_INJUR',\n                       'NUMBER OF PERSONS KILLED'      : 'NUM_PER_KILL',\n                       'NUMBER OF PEDESTRIANS INJURED' : 'NUM_PED_INJUR',\n                       'NUMBER OF PEDESTRIANS KILLED'  : 'NUM_PED_KILL',\n                       'NUMBER OF CYCLIST INJURED'     : 'NUM_CYC_INJUR',\n                       'NUMBER OF CYCLIST KILLED'      : 'NUM_CYC_KILL',\n                       'NUMBER OF MOTORIST INJURED'    : 'NUM_MOTOR_INJUR',\n                       'NUMBER OF MOTORIST KILLED'     : 'NUM_MOTOR_KILL',\n                       'CONTRIBUTING FACTOR VEHICLE 1' : 'VEH_FACTOR_1',\n                       'CONTRIBUTING FACTOR VEHICLE 2' : 'VEH_FACTOR_2',\n                       'CONTRIBUTING FACTOR VEHICLE 3' : 'VEH_FACTOR_3',\n                       'CONTRIBUTING FACTOR VEHICLE 4' : 'VEH_FACTOR_4',\n                       'CONTRIBUTING FACTOR VEHICLE 5' : 'VEH_FACTOR_5',\n                       'UNIQUE KEY' : 'UNIQUE_KEY',\n                       'VEHICLE TYPE CODE 1' : 'VEH_TYPE_1',\n                       'VEHICLE TYPE CODE 2' : 'VEH_TYPE_2',\n                       'VEHICLE TYPE CODE 3' : 'VEH_TYPE_3',\n                       'VEHICLE TYPE CODE 4' : 'VEH_TYPE_4',\n                       'VEHICLE TYPE CODE 5' : 'VEH_TYPE_5'},\n           inplace = True) "
        }, 
        {
            "execution_count": 5, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": "df.drop(['ZIP_CODE', 'STREET_ON', 'STREET_CROSS', 'STREET_OFF', 'VEH_FACTOR_1', 'VEH_FACTOR_2', 'VEH_FACTOR_3', 'VEH_FACTOR_4', 'VEH_FACTOR_5', 'UNIQUE_KEY', 'VEH_TYPE_1', 'VEH_TYPE_2', 'VEH_TYPE_3', 'VEH_TYPE_4', 'VEH_TYPE_5'], axis=1, inplace=True)"
        }, 
        {
            "execution_count": 38, 
            "cell_type": "code", 
            "metadata": {
                "scrolled": false
            }, 
            "outputs": [
                {
                    "execution_count": 38, 
                    "metadata": {}, 
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>DATE</th>\n      <th>TIME</th>\n      <th>BOROUGH</th>\n      <th>LATITUDE</th>\n      <th>LONGITUDE</th>\n      <th>LOCATION</th>\n      <th>NUM_PER_INJUR</th>\n      <th>NUM_PER_KILL</th>\n      <th>NUM_PED_INJUR</th>\n      <th>NUM_PED_KILL</th>\n      <th>NUM_CYC_INJUR</th>\n      <th>NUM_CYC_KILL</th>\n      <th>NUM_MOTOR_INJUR</th>\n      <th>NUM_MOTOR_KILL</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1048570</th>\n      <td>11/16/2014</td>\n      <td>5:40</td>\n      <td>BRONX</td>\n      <td>40.816775</td>\n      <td>-73.809126</td>\n      <td>(40.8167754, -73.8091258)</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1048571</th>\n      <td>11/16/2014</td>\n      <td>6:00</td>\n      <td>QUEENS</td>\n      <td>40.766446</td>\n      <td>-73.829089</td>\n      <td>(40.7664463, -73.8290893)</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1048572</th>\n      <td>11/16/2014</td>\n      <td>6:00</td>\n      <td>NaN</td>\n      <td>40.759949</td>\n      <td>-73.838690</td>\n      <td>(40.7599494, -73.8386902)</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1048573</th>\n      <td>11/16/2014</td>\n      <td>6:00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1048574</th>\n      <td>11/16/2014</td>\n      <td>6:30</td>\n      <td>NaN</td>\n      <td>40.759949</td>\n      <td>-73.838690</td>\n      <td>(40.7599494, -73.8386902)</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>", 
                        "text/plain": "               DATE  TIME BOROUGH   LATITUDE  LONGITUDE  \\\n1048570  11/16/2014  5:40   BRONX  40.816775 -73.809126   \n1048571  11/16/2014  6:00  QUEENS  40.766446 -73.829089   \n1048572  11/16/2014  6:00     NaN  40.759949 -73.838690   \n1048573  11/16/2014  6:00     NaN        NaN        NaN   \n1048574  11/16/2014  6:30     NaN  40.759949 -73.838690   \n\n                          LOCATION  NUM_PER_INJUR  NUM_PER_KILL  \\\n1048570  (40.8167754, -73.8091258)            1.0           0.0   \n1048571  (40.7664463, -73.8290893)            0.0           0.0   \n1048572  (40.7599494, -73.8386902)            0.0           0.0   \n1048573                        NaN            1.0           0.0   \n1048574  (40.7599494, -73.8386902)            0.0           0.0   \n\n         NUM_PED_INJUR  NUM_PED_KILL  NUM_CYC_INJUR  NUM_CYC_KILL  \\\n1048570              1             0              0             0   \n1048571              0             0              0             0   \n1048572              0             0              0             0   \n1048573              0             0              0             0   \n1048574              0             0              0             0   \n\n         NUM_MOTOR_INJUR  NUM_MOTOR_KILL  \n1048570                0               0  \n1048571                0               0  \n1048572                0               0  \n1048573                1               0  \n1048574                0               0  "
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "df.tail(5)"
        }, 
        {
            "execution_count": 6, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": "\n# delete all rows for which column 'Age' has value greater than 30 and Country is India \nindexNames = df[ (df['NUM_PER_INJUR'] == 0.0) & (df['NUM_PER_KILL'] == 0.0) & (df['NUM_PED_INJUR'] == 0) & (df['NUM_PED_KILL'] == 0) & (df['NUM_CYC_INJUR'] == 0) & (df['NUM_CYC_KILL'] == 0) & (df['NUM_MOTOR_INJUR'] == 0) & (df['NUM_MOTOR_KILL'] == 0)].index\n \ndf.drop(indexNames , inplace=True)"
        }, 
        {
            "execution_count": 7, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "execution_count": 7, 
                    "metadata": {}, 
                    "data": {
                        "text/plain": "(200727, 14)"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "df.shape"
        }, 
        {
            "execution_count": 8, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "execution_count": 8, 
                    "metadata": {}, 
                    "data": {
                        "text/plain": "(125164, 14)"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "\n# Drop all rows that have any NaN (missing) values, drop the rows even with single NaN or single missing values.\ndf = df.dropna()\ndf.tail(2)\ndf.shape"
        }, 
        {
            "execution_count": 9, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "execution_count": 9, 
                    "metadata": {}, 
                    "data": {
                        "text/plain": "(124868, 14)"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "# Remove duplicate rows\ndf = df.drop_duplicates()\ndf.shape"
        }, 
        {
            "execution_count": 67, 
            "cell_type": "code", 
            "metadata": {
                "scrolled": true
            }, 
            "outputs": [
                {
                    "execution_count": 67, 
                    "metadata": {}, 
                    "data": {
                        "text/plain": "BROOKLYN         43421\nQUEENS           35206\nMANHATTAN        21778\nBRONX            19166\nSTATEN ISLAND     4762\nName: BOROUGH, dtype: int64"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "df.BOROUGH.value_counts()"
        }, 
        {
            "execution_count": 45, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "execution_count": 45, 
                    "metadata": {}, 
                    "data": {
                        "text/plain": "BROOKLYN         0.349231\nQUEENS           0.283159\nMANHATTAN        0.175159\nBRONX            0.154151\nSTATEN ISLAND    0.038300\nName: BOROUGH, dtype: float64"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "df.BOROUGH.value_counts(normalize = True)"
        }, 
        {
            "source": "Before we proceed, notice that the defaul index of the dataset is a numeric range from 0 to 14. This makes it very difficult to do a query by a specific Borough.\n\nThis can be fixed very easily by setting the 'Borough' column as the index using `set_index()` method.", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "execution_count": 10, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": "# Create variables\n## Create year variable to \"DATE_YEAR\"\ndf['DATE_YEAR'] = pd.to_datetime(df['DATE']).dt.year\n## Create month variable to \"DATE_MTH\"\ndf['DATE_MTH']  = pd.to_datetime(df['DATE']).dt.month\n\n## Create time variable to O'Clock format\ndf['TIME_O'] = df['TIME'].apply(lambda time: time.split(':')[0])\n\ntime_dict = {'0' : 'A 0 O Clock', '1' : 'B 1 O Clock', '2' : 'C 2 O Clock',\n             '3' : 'D 3 O Clock', '4' : 'E 4 O Clock', '5' : 'F 5 O Clock',\n             '6' : 'G 6 O Clock', '7' : 'H 7 O Clock', '8' : 'I 8 O Clock',\n             '9' : 'J 9 O Clock', '10' : 'K 10 O Clock', '11' : 'L 11 O Clock',\n             '12' : 'M 12 O Clock', '13' : 'N 13 O Clock', '14' : 'O 14 Clock',\n             '15' : 'P 15 O Clock', '16' : 'Q 16 O Clock', '17' : 'R 17 O Clock',\n             '18' : 'S 18 O Clock', '19' : 'T 19 O Clock', '20' : 'U 20 O Clock',\n             '21' : 'V 21 O Clock', '22' : 'W 22 O Clock', '23' : 'X 23 O Clock' }\n        \ndf['TIME_GRP'] = df['TIME_O'].map({value : key for value, key in time_dict.items()})"
        }, 
        {
            "execution_count": 70, 
            "cell_type": "code", 
            "metadata": {
                "scrolled": true
            }, 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 124333 entries, 9 to 1048570\nData columns (total 18 columns):\nDATE               124333 non-null object\nTIME               124333 non-null object\nBOROUGH            124333 non-null object\nLATITUDE           124333 non-null float64\nLONGITUDE          124333 non-null float64\nLOCATION           124333 non-null object\nNUM_PER_INJUR      124333 non-null float64\nNUM_PER_KILL       124333 non-null float64\nNUM_PED_INJUR      124333 non-null int64\nNUM_PED_KILL       124333 non-null int64\nNUM_CYC_INJUR      124333 non-null int64\nNUM_CYC_KILL       124333 non-null int64\nNUM_MOTOR_INJUR    124333 non-null int64\nNUM_MOTOR_KILL     124333 non-null int64\nDATE_YEAR          124333 non-null int64\nDATE_MTH           124333 non-null int64\nTIME_O             124333 non-null object\nTIME_GRP           124333 non-null object\ndtypes: float64(4), int64(8), object(6)\nmemory usage: 18.0+ MB\n"
                }
            ], 
            "source": "# Recheck columns\ndf.info()"
        }, 
        {
            "source": "In this step, I rename columns so that we can recall variables easier. I also create new variables including year, month and time (O'Clock) of accident for future analysis. ", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "execution_count": 11, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "execution_count": 11, 
                    "metadata": {}, 
                    "data": {
                        "text/plain": "Text(0.5, 1.0, 'Number of cyclist kill')"
                    }, 
                    "output_type": "execute_result"
                }, 
                {
                    "output_type": "display_data", 
                    "data": {
                        "image/png": "\n", 
                        "text/plain": "<Figure size 720x1080 with 8 Axes>"
                    }, 
                    "metadata": {
                        "needs_background": "light"
                    }
                }
            ], 
            "source": "# Preliminary analysis\n## Create bar plot by year\n## Set subplot size and space\nplt.figure(figsize=(10, 15)).subplots_adjust(hspace=0.5)\n\n# Looking at frequency of person injury by year\nplt.subplot(4, 2 ,1)\ndf.groupby('DATE_YEAR').NUM_PER_INJUR.sum().plot.bar().set_title('Number of person injury')\n\n# Looking at frequency of person kill by year\nplt.subplot(4, 2, 2)\ndf.groupby('DATE_YEAR').NUM_PER_KILL.sum().plot.bar().set_title('Number of person kill')\n\n# Looking at frequency of PEDESTRIANS injury by year\nplt.subplot(4, 2, 3)\ndf.groupby('DATE_YEAR').NUM_PED_INJUR.sum().plot.bar().set_title('Number of pedestrians injury')\n\n# Looking at frequency of pedesstrians kill by year\nplt.subplot(4, 2, 4)\ndf.groupby('DATE_YEAR').NUM_PED_INJUR.sum().plot.bar().set_title('Number of pedestrians kill')\n\n# Looking at frequency of pedestrians kill by year\nplt.subplot(4, 2, 5)\ndf.groupby('DATE_YEAR').NUM_MOTOR_INJUR.sum().plot.bar().set_title('Number of motorist injury')\n\n# Looking at frequency of pedestrians kill by year\nplt.subplot(4, 2, 6)\ndf.groupby('DATE_YEAR').NUM_MOTOR_KILL.sum().plot.bar().set_title('Number of motorist kill')\n\n# Looking at frequency of pedesstrians kill by year\nplt.subplot(4, 2, 7)\ndf.groupby('DATE_YEAR').NUM_CYC_INJUR.sum().plot.bar().set_title('Number of cyclist injury')\n\n# Looking at frequency of pedesstrians kill by year\nplt.subplot(4, 2, 8)\ndf.groupby('DATE_YEAR').NUM_CYC_KILL.sum().plot.bar().set_title('Number of cyclist kill')"
        }, 
        {
            "source": "Let's start visualizing the effect of motor vehicle accidents in New york city. NYC suffered widespread motor vehicle accidents which caused number of persons to death and injury. Let's analyze the effect of this crisis, and compare NYC motor vehicle accidents by borough. Let's do that using a `bar charts` for the years 2014 - 2019. Ignoring 2019 (since it is not full year data), there is increasing trend of number of person injury but not for number of person killed\n\n", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "execution_count": 12, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "execution_count": 12, 
                    "metadata": {}, 
                    "data": {
                        "text/plain": "Text(0.5, 1.0, 'Number of cyclist kill')"
                    }, 
                    "output_type": "execute_result"
                }, 
                {
                    "output_type": "display_data", 
                    "data": {
                        "image/png": "\n", 
                        "text/plain": "<Figure size 720x1080 with 8 Axes>"
                    }, 
                    "metadata": {
                        "needs_background": "light"
                    }
                }
            ], 
            "source": "# Preliminary analysis\n## Create bar plot by month\n\n## Set subplot size and space\nplt.figure(figsize=(10, 15)).subplots_adjust(hspace=0.5)\n\n# Looking at frequency of person injury by year\nplt.subplot(4, 2 ,1)\ndf.groupby('DATE_MTH').NUM_PER_INJUR.sum().plot.bar().set_title('Number of person injury')\n\n# Looking at frequency of person kill by year\nplt.subplot(4, 2, 2)\ndf.groupby('DATE_MTH').NUM_PER_KILL.sum().plot.bar().set_title('Number of person kill')\n\n# Looking at frequency of PEDESTRIANS injury by year\nplt.subplot(4, 2, 3)\ndf.groupby('DATE_MTH').NUM_PED_INJUR.sum().plot.bar().set_title('Number of pedestrians injury')\n\n# Looking at frequency of pedesstrians kill by year\nplt.subplot(4, 2, 4)\ndf.groupby('DATE_MTH').NUM_PED_INJUR.sum().plot.bar().set_title('Number of pedestrians kill')\n\n# Looking at frequency of pedestrians kill by year\nplt.subplot(4, 2, 5)\ndf.groupby('DATE_MTH').NUM_MOTOR_INJUR.sum().plot.bar().set_title('Number of motorist injury')\n\n# Looking at frequency of pedestrians kill by year\nplt.subplot(4, 2, 6)\ndf.groupby('DATE_MTH').NUM_MOTOR_KILL.sum().plot.bar().set_title('Number of motorist kill')\n\n# Looking at frequency of pedesstrians kill by year\nplt.subplot(4, 2, 7)\ndf.groupby('DATE_MTH').NUM_CYC_INJUR.sum().plot.bar().set_title('Number of cyclist injury')\n\n# Looking at frequency of pedesstrians kill by year\nplt.subplot(4, 2, 8)\ndf.groupby('DATE_MTH').NUM_CYC_KILL.sum().plot.bar().set_title('Number of cyclist kill')"
        }, 
        {
            "source": "From the above bar chart, we can see that during July-Oct are months that have high number of person injury and also Sep is the month that have the most killed during the year.", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "execution_count": 13, 
            "cell_type": "code", 
            "metadata": {
                "scrolled": false
            }, 
            "outputs": [
                {
                    "execution_count": 13, 
                    "metadata": {}, 
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>NUM_PER_INJUR</th>\n      <th>NUM_PER_KILL</th>\n      <th>NUM_PED_INJUR</th>\n      <th>NUM_PED_KILL</th>\n      <th>NUM_MOTOR_INJUR</th>\n      <th>NUM_MOTOR_KILL</th>\n      <th>NUM_CYC_INJUR</th>\n      <th>NUM_CYC_KILL</th>\n    </tr>\n    <tr>\n      <th>BOROUGH</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>BRONX</th>\n      <td>26496.0</td>\n      <td>83.0</td>\n      <td>6193</td>\n      <td>44</td>\n      <td>18772</td>\n      <td>32</td>\n      <td>1530</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>BROOKLYN</th>\n      <td>58419.0</td>\n      <td>206.0</td>\n      <td>12829</td>\n      <td>123</td>\n      <td>39448</td>\n      <td>59</td>\n      <td>6158</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>MANHATTAN</th>\n      <td>25925.0</td>\n      <td>113.0</td>\n      <td>8690</td>\n      <td>85</td>\n      <td>12607</td>\n      <td>15</td>\n      <td>4648</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>QUEENS</th>\n      <td>47427.0</td>\n      <td>185.0</td>\n      <td>9130</td>\n      <td>105</td>\n      <td>35209</td>\n      <td>69</td>\n      <td>3093</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>STATEN ISLAND</th>\n      <td>6617.0</td>\n      <td>39.0</td>\n      <td>1001</td>\n      <td>16</td>\n      <td>5436</td>\n      <td>21</td>\n      <td>179</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>", 
                        "text/plain": "               NUM_PER_INJUR  NUM_PER_KILL  NUM_PED_INJUR  NUM_PED_KILL  \\\nBOROUGH                                                                   \nBRONX                26496.0          83.0           6193            44   \nBROOKLYN             58419.0         206.0          12829           123   \nMANHATTAN            25925.0         113.0           8690            85   \nQUEENS               47427.0         185.0           9130           105   \nSTATEN ISLAND         6617.0          39.0           1001            16   \n\n               NUM_MOTOR_INJUR  NUM_MOTOR_KILL  NUM_CYC_INJUR  NUM_CYC_KILL  \nBOROUGH                                                                      \nBRONX                    18772              32           1530             7  \nBROOKLYN                 39448              59           6158            25  \nMANHATTAN                12607              15           4648            13  \nQUEENS                   35209              69           3093            11  \nSTATEN ISLAND             5436              21            179             2  "
                    }, 
                    "output_type": "execute_result"
                }, 
                {
                    "output_type": "display_data", 
                    "data": {
                        "image/png": "\n", 
                        "text/plain": "<Figure size 720x1080 with 8 Axes>"
                    }, 
                    "metadata": {
                        "needs_background": "light"
                    }
                }
            ], 
            "source": "# Preliminary analysis\n## Create bar plot by BOROUGH categories\n\n## Set subplot size and space\nplt.figure(figsize=(10, 15)).subplots_adjust(hspace=0.5)\n\n# Looking at frequency of person injury by year\nplt.subplot(4, 2 ,1)\ndf.groupby('BOROUGH').NUM_PER_INJUR.sum().plot.bar().set_title('Number of person injury')\n\n# Looking at frequency of person kill by year\nplt.subplot(4, 2, 2)\ndf.groupby('BOROUGH').NUM_PER_KILL.sum().plot.bar().set_title('Number of person kill')\n\n# Looking at frequency of PEDESTRIANS injury by year\nplt.subplot(4, 2, 3)\ndf.groupby('BOROUGH').NUM_PED_INJUR.sum().plot.bar().set_title('Number of pedestrians injury')\n\n# Looking at frequency of pedesstrians kill by year\nplt.subplot(4, 2, 4)\ndf.groupby('BOROUGH').NUM_PED_INJUR.sum().plot.bar().set_title('Number of pedestrians kill')\n\n# Looking at frequency of pedestrians kill by year\nplt.subplot(4, 2, 5)\ndf.groupby('BOROUGH').NUM_MOTOR_INJUR.sum().plot.bar().set_title('Number of motorist injury')\n\n# Looking at frequency of pedestrians kill by year\nplt.subplot(4, 2, 6)\ndf.groupby('BOROUGH').NUM_MOTOR_KILL.sum().plot.bar().set_title('Number of motorist kill')\n\n# Looking at frequency of pedesstrians kill by year\nplt.subplot(4, 2, 7)\ndf.groupby('BOROUGH').NUM_CYC_INJUR.sum().plot.bar().set_title('Number of cyclist injury')\n\n# Looking at frequency of pedesstrians kill by year\nplt.subplot(4, 2, 8)\ndf.groupby('BOROUGH').NUM_CYC_KILL.sum().plot.bar().set_title('Number of cyclist kill')\n\n# Create summary table by time in a day\ndf.groupby('BOROUGH').sum()[[\"NUM_PER_INJUR\", \"NUM_PER_KILL\", \"NUM_PED_INJUR\", \"NUM_PED_KILL\", \n                                \"NUM_MOTOR_INJUR\", \"NUM_MOTOR_KILL\", \"NUM_CYC_INJUR\", \"NUM_CYC_KILL\"]]"
        }, 
        {
            "execution_count": 14, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "execution_count": 14, 
                    "metadata": {}, 
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>NUM_PER_INJUR</th>\n      <th>NUM_PER_KILL</th>\n      <th>NUM_PED_INJUR</th>\n      <th>NUM_PED_KILL</th>\n      <th>NUM_MOTOR_INJUR</th>\n      <th>NUM_MOTOR_KILL</th>\n      <th>NUM_CYC_INJUR</th>\n      <th>NUM_CYC_KILL</th>\n    </tr>\n    <tr>\n      <th>BOROUGH</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>BRONX</th>\n      <td>26496.0</td>\n      <td>83.0</td>\n      <td>6193</td>\n      <td>44</td>\n      <td>18772</td>\n      <td>32</td>\n      <td>1530</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>BROOKLYN</th>\n      <td>58419.0</td>\n      <td>206.0</td>\n      <td>12829</td>\n      <td>123</td>\n      <td>39448</td>\n      <td>59</td>\n      <td>6158</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>MANHATTAN</th>\n      <td>25925.0</td>\n      <td>113.0</td>\n      <td>8690</td>\n      <td>85</td>\n      <td>12607</td>\n      <td>15</td>\n      <td>4648</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>QUEENS</th>\n      <td>47427.0</td>\n      <td>185.0</td>\n      <td>9130</td>\n      <td>105</td>\n      <td>35209</td>\n      <td>69</td>\n      <td>3093</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>STATEN ISLAND</th>\n      <td>6617.0</td>\n      <td>39.0</td>\n      <td>1001</td>\n      <td>16</td>\n      <td>5436</td>\n      <td>21</td>\n      <td>179</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>", 
                        "text/plain": "               NUM_PER_INJUR  NUM_PER_KILL  NUM_PED_INJUR  NUM_PED_KILL  \\\nBOROUGH                                                                   \nBRONX                26496.0          83.0           6193            44   \nBROOKLYN             58419.0         206.0          12829           123   \nMANHATTAN            25925.0         113.0           8690            85   \nQUEENS               47427.0         185.0           9130           105   \nSTATEN ISLAND         6617.0          39.0           1001            16   \n\n               NUM_MOTOR_INJUR  NUM_MOTOR_KILL  NUM_CYC_INJUR  NUM_CYC_KILL  \nBOROUGH                                                                      \nBRONX                    18772              32           1530             7  \nBROOKLYN                 39448              59           6158            25  \nMANHATTAN                12607              15           4648            13  \nQUEENS                   35209              69           3093            11  \nSTATEN ISLAND             5436              21            179             2  "
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "\n# group df by boroughs and apply sum() function \ndf_borough = df.groupby('BOROUGH', axis=0).sum()[[\"NUM_PER_INJUR\", \"NUM_PER_KILL\", \"NUM_PED_INJUR\", \"NUM_PED_KILL\", \n                                \"NUM_MOTOR_INJUR\", \"NUM_MOTOR_KILL\", \"NUM_CYC_INJUR\", \"NUM_CYC_KILL\"]]\ndf_borough.head()"
        }, 
        {
            "execution_count": 15, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "display_data", 
                    "data": {
                        "image/png": "\n", 
                        "text/plain": "<Figure size 1080x432 with 1 Axes>"
                    }, 
                    "metadata": {}
                }
            ], 
            "source": "colors_list = ['gold', 'yellowgreen', 'lightskyblue', 'lightgreen', 'pink']\nexplode_list = [0.1, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.\n\ndf_borough['NUM_PER_KILL'].plot(kind='pie',\n                            figsize=(15, 6),\n                            autopct='%1.1f%%', \n                            startangle=90,    \n                            shadow=True,       \n                            labels=None,         # turn off labels on pie chart\n                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct \n                            colors=colors_list,  # add custom colors\n                            explode=explode_list # 'explode' lowest 3 continents\n                            )\n\n# scale the title up by 12% to match pctdistance\nplt.title('Number of person killed', y=1.12) \n\nplt.axis('equal') \n\n# add legend\nplt.legend(labels=df_borough.index, loc='upper left') \n\nplt.show()"
        }, 
        {
            "source": "\nA `pie chart` is a circualr graphic that displays numeric proportions by dividing a circle (or pie) into proportional slices. Let's use a pie chart to explore the proportion (percentage) of number of person killed grouped by borough for the entire time period from 2014 to 2019. Using the above pie chart, the smallest number of persons killed occurred in STATEN ISLAND (6.2%) and the highest number of persons killed is in BROOKLYN (32.9%)", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "execution_count": 16, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "execution_count": 16, 
                    "metadata": {}, 
                    "data": {
                        "text/plain": "Text(0, 0.5, 'number killed')"
                    }, 
                    "output_type": "execute_result"
                }, 
                {
                    "output_type": "display_data", 
                    "data": {
                        "image/png": "\n", 
                        "text/plain": "<Figure size 432x288 with 1 Axes>"
                    }, 
                    "metadata": {
                        "needs_background": "light"
                    }
                }
            ], 
            "source": "plt.scatter(df[\"NUM_PER_INJUR\"], df[\"NUM_PER_KILL\"])\nplt.title(\"scatter plot of number of persons injured and killed\")\nplt.xlabel(\"number injured\")\nplt.ylabel(\"number killed\")"
        }, 
        {
            "source": "We can show the distribution of accidents using a scatter plot; the Y-axis indicates number of persons killed and the X-axis shows number of persons injured. A scatter plot is a useful method of comparing variables against each other. The data in a scatter plot is considered to express a trend. Notice how the scatter plot does not connect the datapoints together. As shown in the figure above there seems to be week correlation between number of persons injured and number killed since there is no pattern in the data as the number of persons injured go by, the number of people killed doesn't show any trend. Also the data points are very scattered, showing lots of variability. We can examine the correlation between number of persons unjured and number of persons killed and it is approximately 0.224. We can calculate the correlation between ...using the method \"corr\".", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "execution_count": 17, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "execution_count": 17, 
                    "metadata": {}, 
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>NUM_PER_INJUR</th>\n      <th>NUM_PER_KILL</th>\n      <th>NUM_PED_INJUR</th>\n      <th>NUM_PED_KILL</th>\n      <th>NUM_CYC_INJUR</th>\n      <th>NUM_CYC_KILL</th>\n      <th>NUM_MOTOR_INJUR</th>\n      <th>NUM_MOTOR_KILL</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>NUM_PER_INJUR</th>\n      <td>1.000000</td>\n      <td>-0.045319</td>\n      <td>-0.130552</td>\n      <td>-0.045317</td>\n      <td>-0.129823</td>\n      <td>-0.017002</td>\n      <td>0.872942</td>\n      <td>-0.011213</td>\n    </tr>\n    <tr>\n      <th>NUM_PER_KILL</th>\n      <td>-0.045319</td>\n      <td>1.000000</td>\n      <td>-0.011713</td>\n      <td>0.788259</td>\n      <td>-0.020409</td>\n      <td>0.346812</td>\n      <td>-0.023313</td>\n      <td>0.548353</td>\n    </tr>\n    <tr>\n      <th>NUM_PED_INJUR</th>\n      <td>-0.130552</td>\n      <td>-0.011713</td>\n      <td>1.000000</td>\n      <td>0.000270</td>\n      <td>-0.224594</td>\n      <td>-0.002640</td>\n      <td>-0.492941</td>\n      <td>-0.020584</td>\n    </tr>\n    <tr>\n      <th>NUM_PED_KILL</th>\n      <td>-0.045317</td>\n      <td>0.788259</td>\n      <td>0.000270</td>\n      <td>1.000000</td>\n      <td>-0.016559</td>\n      <td>0.075249</td>\n      <td>-0.030039</td>\n      <td>0.011563</td>\n    </tr>\n    <tr>\n      <th>NUM_CYC_INJUR</th>\n      <td>-0.129823</td>\n      <td>-0.020409</td>\n      <td>-0.224594</td>\n      <td>-0.016559</td>\n      <td>1.000000</td>\n      <td>-0.000274</td>\n      <td>-0.307898</td>\n      <td>-0.014282</td>\n    </tr>\n    <tr>\n      <th>NUM_CYC_KILL</th>\n      <td>-0.017002</td>\n      <td>0.346812</td>\n      <td>-0.002640</td>\n      <td>0.075249</td>\n      <td>-0.000274</td>\n      <td>1.000000</td>\n      <td>-0.011852</td>\n      <td>-0.000808</td>\n    </tr>\n    <tr>\n      <th>NUM_MOTOR_INJUR</th>\n      <td>0.872942</td>\n      <td>-0.023313</td>\n      <td>-0.492941</td>\n      <td>-0.030039</td>\n      <td>-0.307898</td>\n      <td>-0.011852</td>\n      <td>1.000000</td>\n      <td>0.005447</td>\n    </tr>\n    <tr>\n      <th>NUM_MOTOR_KILL</th>\n      <td>-0.011213</td>\n      <td>0.548353</td>\n      <td>-0.020584</td>\n      <td>0.011563</td>\n      <td>-0.014282</td>\n      <td>-0.000808</td>\n      <td>0.005447</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>", 
                        "text/plain": "                 NUM_PER_INJUR  NUM_PER_KILL  NUM_PED_INJUR  NUM_PED_KILL  \\\nNUM_PER_INJUR         1.000000     -0.045319      -0.130552     -0.045317   \nNUM_PER_KILL         -0.045319      1.000000      -0.011713      0.788259   \nNUM_PED_INJUR        -0.130552     -0.011713       1.000000      0.000270   \nNUM_PED_KILL         -0.045317      0.788259       0.000270      1.000000   \nNUM_CYC_INJUR        -0.129823     -0.020409      -0.224594     -0.016559   \nNUM_CYC_KILL         -0.017002      0.346812      -0.002640      0.075249   \nNUM_MOTOR_INJUR       0.872942     -0.023313      -0.492941     -0.030039   \nNUM_MOTOR_KILL       -0.011213      0.548353      -0.020584      0.011563   \n\n                 NUM_CYC_INJUR  NUM_CYC_KILL  NUM_MOTOR_INJUR  NUM_MOTOR_KILL  \nNUM_PER_INJUR        -0.129823     -0.017002         0.872942       -0.011213  \nNUM_PER_KILL         -0.020409      0.346812        -0.023313        0.548353  \nNUM_PED_INJUR        -0.224594     -0.002640        -0.492941       -0.020584  \nNUM_PED_KILL         -0.016559      0.075249        -0.030039        0.011563  \nNUM_CYC_INJUR         1.000000     -0.000274        -0.307898       -0.014282  \nNUM_CYC_KILL         -0.000274      1.000000        -0.011852       -0.000808  \nNUM_MOTOR_INJUR      -0.307898     -0.011852         1.000000        0.005447  \nNUM_MOTOR_KILL       -0.014282     -0.000808         0.005447        1.000000  "
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "df[['NUM_PER_INJUR', 'NUM_PER_KILL', 'NUM_PED_INJUR', 'NUM_PED_KILL', 'NUM_CYC_INJUR', 'NUM_CYC_KILL', 'NUM_MOTOR_INJUR', 'NUM_MOTOR_KILL']].corr()  \n"
        }, 
        {
            "source": "As the number of motorist injured goes up, the number of persons injured goes up (the correlation coefficient is positive and it is approximately 0.89): this indicates a positive relationship between these two variables. As the number of persons injured increases the number of persons killed also increases as these two variables have a positive correlation coefficient, but there is a very week correlation of 0.023. Looking at the above output, there seems to be a high correlation between number of pedestrians killed and number of persons killed, and it is approximately 0.787. We can examine the correlation between number of cyclist injured and number of pedestians killed and it's -0.00014. As the number of cyclist injured increases, the number of pedestians killed decreases (the correlation coefficient is negative), the correlation coefficient is almost zero this indicates a the two variables most likely do not affect each other. The correlation between number of motorist killed and number of persons killed is ~ 0.619 which shows that the relationship is positive and moderately strong.", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "execution_count": 18, 
            "cell_type": "code", 
            "metadata": {
                "scrolled": true
            }, 
            "outputs": [
                {
                    "execution_count": 18, 
                    "metadata": {}, 
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>BOROUGH</th>\n      <th>LATITUDE</th>\n      <th>LONGITUDE</th>\n      <th>NUM_PER_INJUR</th>\n      <th>NUM_PER_KILL</th>\n      <th>NUM_PED_INJUR</th>\n      <th>NUM_PED_KILL</th>\n      <th>NUM_CYC_INJUR</th>\n      <th>NUM_CYC_KILL</th>\n      <th>NUM_MOTOR_INJUR</th>\n      <th>NUM_MOTOR_KILL</th>\n      <th>DATE_YEAR</th>\n      <th>DATE_MTH</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>BRONX</td>\n      <td>7.847414e+05</td>\n      <td>-1.419361e+06</td>\n      <td>26496.0</td>\n      <td>83.0</td>\n      <td>6193</td>\n      <td>44</td>\n      <td>1530</td>\n      <td>7</td>\n      <td>18772</td>\n      <td>32</td>\n      <td>38784548</td>\n      <td>125712</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>BROOKLYN</td>\n      <td>1.770710e+06</td>\n      <td>-3.220738e+06</td>\n      <td>58419.0</td>\n      <td>206.0</td>\n      <td>12829</td>\n      <td>123</td>\n      <td>6158</td>\n      <td>25</td>\n      <td>39448</td>\n      <td>59</td>\n      <td>87931868</td>\n      <td>287032</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>MANHATTAN</td>\n      <td>8.910743e+05</td>\n      <td>-1.616899e+06</td>\n      <td>25925.0</td>\n      <td>113.0</td>\n      <td>8690</td>\n      <td>85</td>\n      <td>4648</td>\n      <td>13</td>\n      <td>12607</td>\n      <td>15</td>\n      <td>44127204</td>\n      <td>143451</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>QUEENS</td>\n      <td>1.438087e+06</td>\n      <td>-2.607572e+06</td>\n      <td>47427.0</td>\n      <td>185.0</td>\n      <td>9130</td>\n      <td>105</td>\n      <td>3093</td>\n      <td>11</td>\n      <td>35209</td>\n      <td>69</td>\n      <td>71319828</td>\n      <td>233915</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>STATEN ISLAND</td>\n      <td>1.942566e+05</td>\n      <td>-3.547489e+05</td>\n      <td>6617.0</td>\n      <td>39.0</td>\n      <td>1001</td>\n      <td>16</td>\n      <td>179</td>\n      <td>2</td>\n      <td>5436</td>\n      <td>21</td>\n      <td>9657944</td>\n      <td>31567</td>\n    </tr>\n  </tbody>\n</table>\n</div>", 
                        "text/plain": "         BOROUGH      LATITUDE     LONGITUDE  NUM_PER_INJUR  NUM_PER_KILL  \\\n0          BRONX  7.847414e+05 -1.419361e+06        26496.0          83.0   \n1       BROOKLYN  1.770710e+06 -3.220738e+06        58419.0         206.0   \n2      MANHATTAN  8.910743e+05 -1.616899e+06        25925.0         113.0   \n3         QUEENS  1.438087e+06 -2.607572e+06        47427.0         185.0   \n4  STATEN ISLAND  1.942566e+05 -3.547489e+05         6617.0          39.0   \n\n   NUM_PED_INJUR  NUM_PED_KILL  NUM_CYC_INJUR  NUM_CYC_KILL  NUM_MOTOR_INJUR  \\\n0           6193            44           1530             7            18772   \n1          12829           123           6158            25            39448   \n2           8690            85           4648            13            12607   \n3           9130           105           3093            11            35209   \n4           1001            16            179             2             5436   \n\n   NUM_MOTOR_KILL  DATE_YEAR  DATE_MTH  \n0              32   38784548    125712  \n1              59   87931868    287032  \n2              15   44127204    143451  \n3              69   71319828    233915  \n4              21    9657944     31567  "
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "df_map=df.groupby(['BOROUGH'], as_index=False).sum()\ndf_map"
        }, 
        {
            "execution_count": 19, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "Solving environment: done\n\n## Package Plan ##\n\n  environment location: /opt/conda/envs/Python36\n\n  added / updated specs: \n    - folium=0.5.0\n\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    branca-0.3.1               |             py_0          25 KB  conda-forge\n    altair-3.2.0               |           py36_0         770 KB  conda-forge\n    vincent-0.4.4              |             py_1          28 KB  conda-forge\n    folium-0.5.0               |             py_0          45 KB  conda-forge\n    openssl-1.1.1c             |       h516909a_0         2.1 MB  conda-forge\n    certifi-2019.6.16          |           py36_1         149 KB  conda-forge\n    ca-certificates-2019.6.16  |       hecc5488_0         145 KB  conda-forge\n    ------------------------------------------------------------\n                                           Total:         3.3 MB\n\nThe following NEW packages will be INSTALLED:\n\n    altair:          3.2.0-py36_0      conda-forge\n    branca:          0.3.1-py_0        conda-forge\n    folium:          0.5.0-py_0        conda-forge\n    vincent:         0.4.4-py_1        conda-forge\n\nThe following packages will be UPDATED:\n\n    ca-certificates: 2019.5.15-0                   --> 2019.6.16-hecc5488_0 conda-forge\n    certifi:         2019.6.16-py36_1              --> 2019.6.16-py36_1     conda-forge\n\nThe following packages will be DOWNGRADED:\n\n    openssl:         1.1.1c-h7b6447c_1             --> 1.1.1c-h516909a_0    conda-forge\n\n\nDownloading and Extracting Packages\nbranca-0.3.1         | 25 KB     | ##################################### | 100% \naltair-3.2.0         | 770 KB    | ##################################### | 100% \nvincent-0.4.4        | 28 KB     | ##################################### | 100% \nfolium-0.5.0         | 45 KB     | ##################################### | 100% \nopenssl-1.1.1c       | 2.1 MB    | ##################################### | 100% \ncertifi-2019.6.16    | 149 KB    | ##################################### | 100% \nca-certificates-2019 | 145 KB    | ##################################### | 100% \nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\nFolium installed and imported!\n"
                }
            ], 
            "source": "!conda install -c conda-forge folium=0.5.0 --yes\nimport folium\n\nprint('Folium installed and imported!')"
        }, 
        {
            "execution_count": 95, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "GeoJSON file downloaded!\n"
                }
            ], 
            "source": "# download countries geojson file\n!wget --quiet https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/world_countries.json -O world_countries.json\n    \nprint('GeoJSON file downloaded!')"
        }, 
        {
            "execution_count": 97, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": "world_geo = r'world_countries.json' # geojson file\n\n# create a plain world map\nworld_map = folium.Map(location=[40.7128, -74.0060], zoom_start=2, tiles='Mapbox Bright')\n"
        }, 
        {
            "execution_count": null, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": "\n# generate choropleth map using the total immigration of each country to Canada from 1980 to 2013\nworld_map.choropleth(\n    geo_data=world_geo,\n    data=df_map,\n    columns=['BOROUGH', 'NUM_PER_INJUR'],\n    key_on='feature.properties.DISTRICT',\n    fill_color='YlOrRd', \n    fill_opacity=0.7, \n    line_opacity=0.2,\n    legend_name='Immigration to Canada'\n)\n\n# display map\nworld_map"
        }, 
        {
            "execution_count": null, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": ""
        }, 
        {
            "source": "The dataframe consists of 124333 accidents, which took place through the years 2014 to 2019. In order to reduce computational cost, let's just work with the first 100 accidents in this dataset.", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "execution_count": 20, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": "# get the first 100 accidents in the df dataframe\nlimit = 100\ndf_accidents = df.iloc[0:limit, :]"
        }, 
        {
            "execution_count": 21, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "execution_count": 21, 
                    "metadata": {}, 
                    "data": {
                        "text/plain": "(100, 18)"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "df_accidents.shape"
        }, 
        {
            "source": "Now we reduced the data a little bit, let's visualize where these accidents took place in the city of New York. We will use the default style and we will initialize the zoom level to 12. ", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "execution_count": 22, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": "# NYC latitude and longitude values\nlatitude = 40.7128\nlongitude = -74.0060"
        }, 
        {
            "execution_count": 23, 
            "cell_type": "code", 
            "metadata": {
                "scrolled": false
            }, 
            "outputs": [
                {
                    "execution_count": 23, 
                    "metadata": {}, 
                    "data": {
                        "text/html": "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"data:text/html;charset=utf-8;base64,PCFET0NUWVBFIGh0bWw+CjxoZWFkPiAgICAKICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNvbnRlbnQtdHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04IiAvPgogICAgPHNjcmlwdD5MX1BSRUZFUl9DQU5WQVMgPSBmYWxzZTsgTF9OT19UT1VDSCA9IGZhbHNlOyBMX0RJU0FCTEVfM0QgPSBmYWxzZTs8L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2xlYWZsZXRAMS4yLjAvZGlzdC9sZWFmbGV0LmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8xLjExLjEvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvanMvYm9vdHN0cmFwLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvTGVhZmxldC5hd2Vzb21lLW1hcmtlcnMvMi4wLjIvbGVhZmxldC5hd2Vzb21lLW1hcmtlcnMuanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2xlYWZsZXRAMS4yLjAvZGlzdC9sZWFmbGV0LmNzcyIvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjIuMC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvY3NzL2Jvb3RzdHJhcC10aGVtZS5taW4uY3NzIi8+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vZm9udC1hd2Vzb21lLzQuNi4zL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyIvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9MZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy8yLjAuMi9sZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9yYXdnaXQuY29tL3B5dGhvbi12aXN1YWxpemF0aW9uL2ZvbGl1bS9tYXN0ZXIvZm9saXVtL3RlbXBsYXRlcy9sZWFmbGV0LmF3ZXNvbWUucm90YXRlLmNzcyIvPgogICAgPHN0eWxlPmh0bWwsIGJvZHkge3dpZHRoOiAxMDAlO2hlaWdodDogMTAwJTttYXJnaW46IDA7cGFkZGluZzogMDt9PC9zdHlsZT4KICAgIDxzdHlsZT4jbWFwIHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtyaWdodDowO2xlZnQ6MDt9PC9zdHlsZT4KICAgIAogICAgICAgICAgICA8c3R5bGU+ICNtYXBfYTdiNTFjMGU5MGQ2NDBhZThhMzcxMjQ1NDg0NTIwMzkgewogICAgICAgICAgICAgICAgcG9zaXRpb24gOiByZWxhdGl2ZTsKICAgICAgICAgICAgICAgIHdpZHRoIDogMTAwLjAlOwogICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAuMCU7CiAgICAgICAgICAgICAgICBsZWZ0OiAwLjAlOwogICAgICAgICAgICAgICAgdG9wOiAwLjAlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICA8L3N0eWxlPgogICAgICAgIAo8L2hlYWQ+Cjxib2R5PiAgICAKICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb2xpdW0tbWFwIiBpZD0ibWFwX2E3YjUxYzBlOTBkNjQwYWU4YTM3MTI0NTQ4NDUyMDM5IiA+PC9kaXY+CiAgICAgICAgCjwvYm9keT4KPHNjcmlwdD4gICAgCiAgICAKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGJvdW5kcyA9IG51bGw7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIG1hcF9hN2I1MWMwZTkwZDY0MGFlOGEzNzEyNDU0ODQ1MjAzOSA9IEwubWFwKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21hcF9hN2I1MWMwZTkwZDY0MGFlOGEzNzEyNDU0ODQ1MjAzOScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2VudGVyOiBbNDAuNzEyOCwtNzQuMDA2XSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb206IDEyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4Qm91bmRzOiBib3VuZHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcnM6IFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ybGRDb3B5SnVtcDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcnM6IEwuQ1JTLkVQU0czODU3CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgdGlsZV9sYXllcl82OGM4Nzg3M2FlZTU0MzNjODU1Y2I2ZjRiM2MyMTI2MiA9IEwudGlsZUxheWVyKAogICAgICAgICAgICAgICAgJ2h0dHBzOi8ve3N9LnRpbGUub3BlbnN0cmVldG1hcC5vcmcve3p9L3t4fS97eX0ucG5nJywKICAgICAgICAgICAgICAgIHsKICAiYXR0cmlidXRpb24iOiBudWxsLAogICJkZXRlY3RSZXRpbmEiOiBmYWxzZSwKICAibWF4Wm9vbSI6IDE4LAogICJtaW5ab29tIjogMSwKICAibm9XcmFwIjogZmFsc2UsCiAgInN1YmRvbWFpbnMiOiAiYWJjIgp9CiAgICAgICAgICAgICAgICApLmFkZFRvKG1hcF9hN2I1MWMwZTkwZDY0MGFlOGEzNzEyNDU0ODQ1MjAzOSk7CiAgICAgICAgCjwvc2NyaXB0Pg==\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>", 
                        "text/plain": "<folium.folium.Map at 0x7f15313cf438>"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "# create map and display it\nnyc_map = folium.Map(location=[latitude, longitude], zoom_start=12)\n\n# display the map of San Francisco\nnyc_map"
        }, 
        {
            "source": "Now let's superimpose the locations of the accidents onto the map. The way to do that in **Folium** is to create a *feature group* with its own features and style and then add it to the nyc_map.", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "execution_count": 24, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [
                {
                    "execution_count": 24, 
                    "metadata": {}, 
                    "data": {
                        "text/html": "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"data:text/html;charset=utf-8;base64,\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>", 
                        "text/plain": "<folium.folium.Map at 0x7f15313cf438>"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "# instantiate a feature group for the incidents in the dataframe\nincidents = folium.map.FeatureGroup()\n\n# loop through the 100 accidents and add each to the incidents feature group\nfor lat, lng, in zip(df_accidents.LATITUDE, df_accidents.LONGITUDE):\n    incidents.add_child(\n        folium.features.CircleMarker(\n            [lat, lng],\n            radius=5, # define how big you want the circle markers to be\n            color='black',\n            fill=True,\n            fill_color='blue',\n            fill_opacity=0.6\n        )\n    )\n\n# add incidents to map\nnyc_map.add_child(incidents)"
        }, 
        {
            "execution_count": null, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": ""
        }, 
        {
            "execution_count": null, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": ""
        }, 
        {
            "source": "# 1. Introduction", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "An insurance company is trying to launch an office in New York city in one of the Borough's to make profit at a minimum cost. There are five Borough categories; Bronx, Brooklyn, Manhattan, Queens and Staten Island. The company wants to decide one Borough out of these five locations. For the insurance company's profitability and set insurance premium for the residents of New York city, and advocate a systems approach to road traffic safety that emphasizes involvement at all levels of the road traffic system, studying motor vehicle collisions statistics from public dataset in each Borough group is important. The dataset contains information on motorists, cyclists, and pedestrians. The company is trying to answer which regions are better or worse in terms of number of injuries and fatalities?  \n   \nRoad traffic accidents are the leading cause of death and injury and the tenth leading cause of all deaths globally. Now make up a surprisingly significant portion of the worldwide burden of ill health. An estimated 1.2 million people are killed in road crashes each year and as many as 50 million are injured. If present trends continue, road traffic injuries are predicted to be the third leading contributor to the global burden of disease and injury by 2020. This burden is creating enormous economic hardship due to the loss of family.  \nRoad traffic injuries are preventable if successsful interventions such as seat belt safety laws, enforcement of speed limits, warnings about the dangers of mixing alcohol consumption with driving, and safer design and use of roads and vehicles are considered. More than one-half of all road traffic deaths globally occur among people ages 15 to 44\u2014their most productive earning years. Moreover, the disability burden for this age group accounts for 60 percent of all lost because of road traffic accidents. \nDriver impairment is an important component of road traffic accidents, driving at excess speeds, while under the influence of alcohol or drugs, while sleepy or tired, when visibility is compromised, or without protective gear for all vehicle occupants are major factors in crashes, deaths, and serious injuries.\nPrevention interventions include: managing risk exposure to potential road traffic injury, Planning and designing roads for safety, setting road and safety rules, securing compliance, and improving transport policy, Providing visible, crashworthy, and smart vehicles.\n\nThe dataset contains a breakdown of every collision by location and injury. Each record represents a collision in New York by borough and this data can be used to do in-depth analysis.  \nThis would interest any insurance company to open an office in New york city.  \nThe data considered in this project falls within location data, and hence it was modeled by use of k-means clustering which will be described in section 3. For the analysis of unlabeled data, k-means clustering is a widely used approach. \n\n\n", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "# 2. Dataset", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "This is a breakdown of every collision in NYC by location and injury. This data is manually run every month and reviewed by the TrafficStat Unit before being posted on the NYPD website. Each record represents a collision in NYC by city, borough and cross street. This data can be used by the public to see how dangerous/safe intersections are in NYC.", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "In this section the dataset used in the analysis is described. The public dataset about motor vehicle collision was obtained from kaggle website and there are 29 variables\nand 1.4 million rows. Each record includes location coordinates and other feauture variables, most notably the number of injuries and fatalities, segmented further by motorists, cyclists, and pedestrians. Out of these feature variables some of them important for this particular study are selected. These are Borough, Latitude, Longitude, number of persons injured, number of persons killed, number of pedestrians injured, number of pedestrians killed, number of cyclist injured, number of cyclist killed, number of motorist injured and number of motorist killed. The original dataset is processed, the rows that has any missing values were removed in order to perform statistical analysis. The variable Borough is used to study which of the Borough group has the higher number of deaths and injuries as comparred to the other. The motor vehicle collisions dataset is in .csv format, which can be easily imported into pandas. After the dataset is processed and the missing values were removed, the pandas dataframe contains information on 671513 records; from these 211793 Brooklyn, 183346 Queens, 152546 Manhattan, 96756 Bronx and 27072 Staten Island. \n\nFor a Borough that has the lowest number of people killed and injured, a Foursquare location data is used in order to get the most common venues of given Borough of New York city and then we will use these features to cluster the Borough's in to different cluster groups.   \n\nThe total number of people involved in accident by each Borough category, the maximum number of people killed as well as the average number of person's killed is presented in the following output:\nFrom our data, it seems BRONX, BROOKLYN and MANHATTAN have, on average, similar number of persons killed, while QUEENS and STATEN ISLAND are approximately the same in number of people killed.\n\nThe 29 variables presented in the dataset are as follows:   \nDATE - Date of accident  \nTIME - Time of accident  \nBOROUGH - Borough of accident  \nZIP CODE - Zip code of accident  \nLATITUDE - Location (Latitude of accident)  \nLONGITUDE - Location (Longitude of accident)  \nON STREET NAME - Name of On-street that accident happened  \nCROSS STREE NAME - Connecting of street that accident happened  \nOFF STREET NAME - Name of Off-street that accident happened  \nNUMBER OF PERSONS INJURED - Number of persons injured  \nNUMBER OF PERSONS KILLED - Number of persons killed  \nNUMBER OF PEDESTRIANS INJURED - Number of pedestrains injury  \nNUMBER OF PEDESTRIANS KILLED - Number of pedestrains killed  \nNUMBER OF CYCLIST INJURED - Number of cyclist injury  \nNUMBER OF CYCLIST KILLED - Number of cyclist killed  \nNUMBER OF MOTORIST INJURED - Number of motorist injury  \nNUMBER OF MOTORIST KILLED - Number of motorist killed  \nCONTRIBUTING FACTOR VEHICLE - Reason of accident  \nUNIQUE KEY - Unique key VEHICLE TYPE - Type of vehicle involve in accident  \nFrom missing value investigation, there are number of variables have missing value except Date, Time, and number of injured and killed.  ", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "# 3. Statistical Methodology", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "# 3.1 Descriptive statistics and graphics\nIn this report, an exploratory data analysis (EDA) was performed to explore the data. Before using the forsquare API the public dataset was used to obtain some useful insights in the structure of the data: descriptive statistics, pearson correlation between different variables as well as graphical displays such as bar graph by borough, bar graph over time and pie charts were used. In this section, we briefly examine the k-means clustering algorithm. There are many models for **clustering**, we will be presenting the model that is considered one of the simplest models amongst them. Despite its simplicity, the **K-means** is vastly used for clustering in many data science applications, especially useful to quickly discover insights from **unlabeled data**.  \n\nThis section will focus on unsupervised learning, a statistical tool intended for the setting in which we have only a set of features X1,X2, . . . , Xp measured on n observations. We are not interested in prediction, because we do not have an associated response variable Y. Rather, the goal is to discover interesting things about the measurements on X1,X2, . . .,Xp. Is there an informative way to visualize the data? Can we discover subgroups among the variables or among the observations? Unsupervised learning refers to a diverse set of techniques for answering questions such as these. we will focus on a particular type of unsupervised learning: clustering, a broad class of method for discovering unknown subgroups in data.\n\nUnlike supervised techniques, unsupervised learning is not a simple goal for the analysis, such as prediction of a response. Unsupervised learning is often performed as part of an exploratory data analysis. Furthermore, it can be exploratory hard to assess the results obtained from unsupervised learning methods, data analysis since there is no universally accepted mechanism for performing validating results on an independent data set. The reason for this difference is simple. If we fit a predictive model using a supervised learning technique, then it is possible to check by seeing how well our model predicts the response Y on observations not used in fitting the model. However, in unsupervised learning, there is no way to check our work because we don\u2019t know the true answer\u2014the problem is unsupervised.\n\nClustering refers to a very broad set of techniques for finding subgroups, or clustering clusters, in a data set. When we cluster the observations of a data set, we seek to partition them into distinct groups so that the observations within each group are quite similar to each other, while observations in different groups are quite different from each other.\n\nK-means clustering is a simple and elegant approach for partitioning a data set into K distinct, non-overlapping clusters. To perform K-means clustering, we must first specify the desired number of clusters K; then the K-means algorithm will assign each observation to exactly one of the K clusters. Figure 4.5 shows the results obtained from performing K-means clustering on a data obtained from foursquare API consisting of 150 observations in two dimensions, using three different values of K. The K-means clustering procedure results from a simple and intuitive mathematical problem. We begin by defining some notation. According to Tibshirani, let C1, . . ., CK denote sets containing the indices of the observations in each cluster. These sets satisfy two properties:\n\n1. C1 \u222a C2 \u222a . . . \u222a CK = {1, . . ., n}. In other words, each observation belongs to at least one of the K clusters.\n2. Ck \u2229 Ck` = \u2205 for all k != k. In other words, the clusters are nonoverlapping: no observation belongs to more than one cluster.  \n\nThe idea behind K-means clustering is that a good clustering is one for which the within-cluster variation is as small as possible. In words, we want to partition the observations into K clusters such that the total within-cluster variation, summed over all K clusters, is as small as possible. \n\nClustering can be a very useful tool for data analysis in the unsupervised setting. However, there are a number of issues that arise in performing\nclustering. In order to perform clustering, some decisions must be made.\n\n1.Should the observations or features first be standardized in some way? For instance, maybe the variables should be centered to have mean zero and scaled to have standard deviation one  \n2.How many clusters should we look for in the data?\n\nEach of these decisions can have a strong impact on the results obtained. In practice, we try several different choices, and look for the one with the most useful or interpretable solution. With these methods, there is no single right answer\u2014any solution that exposes some interesting aspects of the data should be considered.\n\n# 3.2 Cluster Analysis\nCluster analysis, also called data segmentation, has a variety of goals. All relate to grouping or segmenting a collection of objects into subsets or \u201cclusters,\u201d such that those within each cluster are more closely related to one another than measurements assigned to different clusters.  \n\nThe goal of cluster analysis is to partition the observations into groups  \n(\u201cclusters\u201d) so that the pairwise dissimilarities between those assigned to  \nthe same cluster tend to be smaller than those in different clusters. \n# 14.3 K-means\nThe K-means algorithm is one of the most popular iterative descent clus-\ntering methods. It is intended for situations in which all variables are of\nthe quantitative type, and squared Euclidean distance\nis chosen as the dissimilarity measure.", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "# 4. Results", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "source": "In this section we present the results obtained from the different techniques applied in order to address the problem. Most of thr exploratory results are presented for each of the borough groups. This is because it might be informative for the method employed, Foursquare API.", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "execution_count": 43, 
            "cell_type": "code", 
            "metadata": {
                "scrolled": true
            }, 
            "outputs": [
                {
                    "execution_count": 43, 
                    "metadata": {}, 
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>min</th>\n      <th>max</th>\n      <th>mean</th>\n      <th>median</th>\n      <th>sum</th>\n      <th>std</th>\n    </tr>\n    <tr>\n      <th>BOROUGH</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>BRONX</th>\n      <td>96849</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.000857</td>\n      <td>0.0</td>\n      <td>83.0</td>\n      <td>0.029613</td>\n    </tr>\n    <tr>\n      <th>BROOKLYN</th>\n      <td>211979</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.000972</td>\n      <td>0.0</td>\n      <td>206.0</td>\n      <td>0.031758</td>\n    </tr>\n    <tr>\n      <th>MANHATTAN</th>\n      <td>152734</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>0.000740</td>\n      <td>0.0</td>\n      <td>113.0</td>\n      <td>0.033256</td>\n    </tr>\n    <tr>\n      <th>QUEENS</th>\n      <td>183415</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0.001009</td>\n      <td>0.0</td>\n      <td>185.0</td>\n      <td>0.033579</td>\n    </tr>\n    <tr>\n      <th>STATEN ISLAND</th>\n      <td>27070</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.001441</td>\n      <td>0.0</td>\n      <td>39.0</td>\n      <td>0.038892</td>\n    </tr>\n  </tbody>\n</table>\n</div>", 
                        "text/plain": "                count  min  max      mean  median    sum       std\nBOROUGH                                                           \nBRONX           96849  0.0  2.0  0.000857     0.0   83.0  0.029613\nBROOKLYN       211979  0.0  2.0  0.000972     0.0  206.0  0.031758\nMANHATTAN      152734  0.0  8.0  0.000740     0.0  113.0  0.033256\nQUEENS         183415  0.0  4.0  0.001009     0.0  185.0  0.033579\nSTATEN ISLAND   27070  0.0  2.0  0.001441     0.0   39.0  0.038892"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "df.groupby('BOROUGH').NUM_PER_KILL.agg(['count', 'min', 'max', 'mean', 'median', 'sum', 'std'])       "
        }, 
        {
            "source": "Furthermore, the following table shows the total number of people involved in accident by each Borough category, the maximum number of people injured as well as the average number of person's injured. The highest number of people injured is in the District(Borough) of Queens which is 32 where as the lowest is 20 in Bronx.", 
            "cell_type": "markdown", 
            "metadata": {}
        }, 
        {
            "execution_count": 44, 
            "cell_type": "code", 
            "metadata": {
                "scrolled": true
            }, 
            "outputs": [
                {
                    "execution_count": 44, 
                    "metadata": {}, 
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>min</th>\n      <th>max</th>\n      <th>mean</th>\n      <th>median</th>\n      <th>sum</th>\n      <th>std</th>\n    </tr>\n    <tr>\n      <th>BOROUGH</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>BRONX</th>\n      <td>96849</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>0.273581</td>\n      <td>0.0</td>\n      <td>26496.0</td>\n      <td>0.685284</td>\n    </tr>\n    <tr>\n      <th>BROOKLYN</th>\n      <td>211979</td>\n      <td>0.0</td>\n      <td>24.0</td>\n      <td>0.275589</td>\n      <td>0.0</td>\n      <td>58419.0</td>\n      <td>0.661998</td>\n    </tr>\n    <tr>\n      <th>MANHATTAN</th>\n      <td>152734</td>\n      <td>0.0</td>\n      <td>27.0</td>\n      <td>0.169740</td>\n      <td>0.0</td>\n      <td>25925.0</td>\n      <td>0.482387</td>\n    </tr>\n    <tr>\n      <th>QUEENS</th>\n      <td>183415</td>\n      <td>0.0</td>\n      <td>32.0</td>\n      <td>0.258578</td>\n      <td>0.0</td>\n      <td>47427.0</td>\n      <td>0.644800</td>\n    </tr>\n    <tr>\n      <th>STATEN ISLAND</th>\n      <td>27070</td>\n      <td>0.0</td>\n      <td>22.0</td>\n      <td>0.244440</td>\n      <td>0.0</td>\n      <td>6617.0</td>\n      <td>0.660400</td>\n    </tr>\n  </tbody>\n</table>\n</div>", 
                        "text/plain": "                count  min   max      mean  median      sum       std\nBOROUGH                                                              \nBRONX           96849  0.0  20.0  0.273581     0.0  26496.0  0.685284\nBROOKLYN       211979  0.0  24.0  0.275589     0.0  58419.0  0.661998\nMANHATTAN      152734  0.0  27.0  0.169740     0.0  25925.0  0.482387\nQUEENS         183415  0.0  32.0  0.258578     0.0  47427.0  0.644800\nSTATEN ISLAND   27070  0.0  22.0  0.244440     0.0   6617.0  0.660400"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "df.groupby('BOROUGH').NUM_PER_INJUR.agg(['count', 'min', 'max', 'mean', 'median', 'sum', 'std'])"
        }, 
        {
            "execution_count": null, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": ""
        }, 
        {
            "execution_count": null, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": ""
        }, 
        {
            "execution_count": null, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": ""
        }, 
        {
            "execution_count": null, 
            "cell_type": "code", 
            "metadata": {}, 
            "outputs": [], 
            "source": ""
        }
    ], 
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3.6", 
            "name": "python3", 
            "language": "python"
        }, 
        "language_info": {
            "mimetype": "text/x-python", 
            "nbconvert_exporter": "python", 
            "version": "3.6.8", 
            "name": "python", 
            "file_extension": ".py", 
            "pygments_lexer": "ipython3", 
            "codemirror_mode": {
                "version": 3, 
                "name": "ipython"
            }
        }
    }, 
    "nbformat": 4
}